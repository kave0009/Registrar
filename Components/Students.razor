@page "/"
@using Registrar.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="d-flex justify-content-between mb-3 ">
        <h3>Students</h3>
        <NavLink class="btn btn-sm btn-secondary shadow-sm " href="/new-student">+</NavLink>
    </div>
    <table class="table table-striped table-hover table-bordered shadow-lg students-table">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr class="table-row">
                    <td>@student.Id</td>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <td>@student.Type</td>
                    <td>
                        <NavLink class="btn btn-sm btn-secondary shadow-sm mr-2" href=@($"register/{student.Id}")>Register
                        </NavLink>
                        <button class="btn btn-sm btn-danger shadow-sm"
                            @onclick="() => DeleteStudent(student.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Student> students = new List<Student>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            students = await Http.GetFromJsonAsync<List<Student>>("api/students") ?? new List<Student>();
        }
        catch (HttpRequestException httpRequestException)
        {
            Console.WriteLine($"Request error: {httpRequestException.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task DeleteStudent(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/students/{id}");
            if (response.IsSuccessStatusCode)
            {
                students = students.Where(s => s.Id != id).ToList();
            }
            else
            {
                Console.WriteLine($"Error deleting student: {response.ReasonPhrase}");
            }
        }
        catch (HttpRequestException httpRequestException)
        {
            Console.WriteLine($"Request error: {httpRequestException.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
